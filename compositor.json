{
  "name": "mikiec84/web-platform-tests",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "Hhh",
  "branch": "chrome_experimental",
  "style": {
    "name": "Material",
    "componentSet": {
      "nav": "nav/DarkAbsoluteNav",
      "header": "header/GradientHeader",
      "article": "article/BasicArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "Roboto, sans-serif",
    "heading": {
      "fontWeight": 500,
      "letterSpacing": "-0.01em"
    },
    "colors": {
      "text": "#212121",
      "background": "#fff",
      "primary": "#2196f3",
      "secondary": "#1565c0",
      "highlight": "#ff4081",
      "border": "#e0e0e0",
      "muted": "#f5f5f5"
    },
    "layout": {
      "centered": true,
      "bannerHeight": "80vh",
      "maxWidth": 896
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "http://irc.w3.org/?channels=testing",
          "text": "Home"
        },
        {
          "href": "https://github.com/mikiec84/web-platform-tests",
          "text": "GitHub"
        }
      ]
    },
    {
      "component": "header",
      "heading": "web-platform-tests",
      "subhead": "Test suites for Web-platform specs — including WHATWG, W3C, and others",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "web-platform-tests: Test suites for Web-platform specs — including WHATWG, W3C, and others",
          "url": "http://irc.w3.org/?channels=testing"
        },
        {
          "component": "ui/GithubButton",
          "user": "mikiec84",
          "repo": "web-platform-tests"
        }
      ]
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "<h1>The web-platform-tests Project <a href=\"http://irc.w3.org/?channels=testing\"><img src=\"https://goo.gl/6nCIks\"></a></h1>\n<p>The web-platform-tests Project is a W3C-coordinated attempt to build a\ncross-browser testsuite for the Web-platform stack. Writing tests in a way\nthat allows them to be run in all browsers gives browser projects\nconfidence that they are shipping software that is compatible with other\nimplementations, and that later implementations will be compatible with\ntheir implementations. This in turn gives Web authors/developers\nconfidence that they can actually rely on the Web platform to deliver on\nthe promise of working across browsers and devices without needing extra\nlayers of abstraction to paper over the gaps left by specification\neditors and implementors.</p>\n<h1>Setting Up the Repo</h1>\n<p>Clone or otherwise get <a href=\"https://github.com/w3c/web-platform-tests\">https://github.com/w3c/web-platform-tests</a>.</p>\n<h1>Running the Tests</h1>\n<p>The tests are designed to be run from your local computer. The test\nenvironment requires <a href=\"http://www.python.org/downloads\">Python 2.7+</a> (but not Python 3.x).</p>\n<p>On Windows, be sure to add the Python directory (<code>c:\\python2x</code>, by default) to\nyour <code>%Path%</code> <a href=\"http://www.computerhope.com/issues/ch000549.htm\">Environment Variable</a>,\nand read the <a href=\"#windows-notes\">Windows Notes</a> section below.</p>\n<p>To get the tests running, you need to set up the test domains in your\n<a href=\"http://en.wikipedia.org/wiki/Hosts_%28file%29%23Location_in_the_file_system\"><code>hosts</code> file</a>. The\nfollowing entries are required:</p>\n<pre>127<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.1</span>   <span class=\"hljs-selector-tag\">web-platform</span><span class=\"hljs-selector-class\">.test</span>\n127<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.1</span>   <span class=\"hljs-selector-tag\">www</span><span class=\"hljs-selector-class\">.web-platform</span><span class=\"hljs-selector-class\">.test</span>\n127<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.1</span>   <span class=\"hljs-selector-tag\">www1</span><span class=\"hljs-selector-class\">.web-platform</span><span class=\"hljs-selector-class\">.test</span>\n127<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.1</span>   <span class=\"hljs-selector-tag\">www2</span><span class=\"hljs-selector-class\">.web-platform</span><span class=\"hljs-selector-class\">.test</span>\n127<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.1</span>   <span class=\"hljs-selector-tag\">xn--n8j6ds53lwwkrqhv28a</span><span class=\"hljs-selector-class\">.web-platform</span><span class=\"hljs-selector-class\">.test</span>\n127<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.1</span>   <span class=\"hljs-selector-tag\">xn--lve-6lad</span><span class=\"hljs-selector-class\">.web-platform</span><span class=\"hljs-selector-class\">.test</span>\n0<span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span><span class=\"hljs-selector-class\">.0</span>     <span class=\"hljs-selector-tag\">nonexistent-origin</span><span class=\"hljs-selector-class\">.web-platform</span><span class=\"hljs-selector-class\">.test</span></pre><p>If you are behind a proxy, you also need to make sure the domains above are\nexcluded from your proxy lookups.</p>\n<h1>Running Tests Manually</h1>\n<p>The test server can be started using</p>\n<pre>./wpt serve</pre><p>This will start HTTP servers on two ports and a websockets server on\none port. By default one web server starts on port 8000 and the other\nports are randomly-chosen free ports. Tests must be loaded from the\n<em>first</em> HTTP server in the output. To change the ports, copy the\n<code>config.default.json</code> file to <code>config.json</code> and edit the new file,\nreplacing the part that reads:</p>\n<pre><span class=\"hljs-string\">&quot;http&quot;</span>: [<span class=\"hljs-number\">8000</span>, <span class=\"hljs-string\">&quot;auto&quot;</span>]</pre><p>to some port of your choice e.g.</p>\n<pre><span class=\"hljs-string\">&quot;http&quot;</span>: [<span class=\"hljs-number\">1234</span>, <span class=\"hljs-string\">&quot;auto&quot;</span>]</pre><h2>Running Tests Automatically</h2>\n<p>Tests can be run automatically in a browser using the <code>run</code> command of\nthe <code>wpt</code> script in the root of the checkout. This requires the hosts\nfile setup documented above, but you must <em>not</em> have the\ntest server already running when calling <code>wpt run</code>. The basic command\nline syntax is:</p>\n<pre>./wpt <span class=\"hljs-keyword\">run</span><span class=\"bash\"> product [tests]</span></pre><p><strong>On Windows</strong>: You will need to preceed the prior command with\n<code>python</code> or the path to the python binary.</p>\n<p>where <code>product</code> is currently <code>firefox</code> or <code>chrome</code> and <code>[tests]</code> is a\nlist of paths to tests. This will attempt to automatically locate a\nbrowser instance and install required dependencies. The command is\nvery configurable; for examaple to specify a particular binary use\n<code>wpt run --binary=path product</code>. The full range of options can be see\nwith <code>wpt run --help</code> and <code>wpt run --wptrunner-help</code>.</p>\n<p>Not all dependencies can be automatically installed; in particular the\n<code>certutil</code> tool required to run https tests with Firefox must be\ninstalled using a system package manager or similar.</p>\n<p>On Debian/Ubuntu certutil may be installed using:</p>\n<pre>sudo apt <span class=\"hljs-keyword\">install</span> libnss3-tools</pre><p>And on macOS with homebrew using:</p>\n<pre><span class=\"hljs-keyword\">brew </span><span class=\"hljs-keyword\">install </span>nss</pre><h1>Command Line Tools</h1>\n<p>The <code>wpt</code> command provides a frontend to a variety of tools for\nworking with and running web-platform-tests. Some of the most useful\ncommands are:</p>\n<ul>\n<li><code>wpt serve</code> - For starting the wpt http server</li>\n<li><code>wpt run</code> - For running tests in a browser</li>\n<li><code>wpt lint</code> - For running the lint against all tests</li>\n<li><code>wpt manifest</code> - For updating or generating a <code>MANIFEST.json</code> test manifest</li>\n<li><code>wpt install</code> - For installing the latest release of a browser or\nwebdriver server on the local machine.</li>\n</ul>\n<h1><span>Submodules</span></h1>\n<p>Some optional components of web-platform-tests (test components from\nthird party software and pieces of the CSS build system) are included\nas submodules. To obtain these components run the following in the\nroot of your checkout:</p>\n<pre><span class=\"hljs-comment\">git</span> <span class=\"hljs-comment\">submodule</span> <span class=\"hljs-comment\">update</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">init</span> <span class=\"hljs-literal\">-</span><span class=\"hljs-literal\">-</span><span class=\"hljs-comment\">recursive</span></pre><p>Prior to commit <code>39d07eb01fab607ab1ffd092051cded1bdd64d78</code> submodules\nwere requried for basic functionality. If you are working with an\nolder checkout, the above command is required in all cases.</p>\n<p>When moving between a commit prior to <code>39d07eb</code> and one after it git\nmay complain</p>\n<pre>$ git checkout master\n<span class=\"hljs-keyword\">error: </span>The following untracked working tree files would be overwritten by checkout:\n[&#x2026;]</pre><p>followed by a long list of files. To avoid this error remove\nthe <code>resources</code> and <code>tools</code> directories before switching branches:</p>\n<pre>$ rm -r <span class=\"hljs-built_in\">resources</span>/ tools/\n$ git checkout master\nSwitched <span class=\"hljs-keyword\">to</span> branch <span class=\"hljs-string\">&apos;master&apos;</span>\nYour branch is up-<span class=\"hljs-keyword\">to</span>-<span class=\"hljs-built_in\">date</span> <span class=\"hljs-keyword\">with</span> <span class=\"hljs-string\">&apos;origin/master&apos;</span></pre><p>When moving in the opposite direction, i.e. to a commit that does have\nsubmodules, you will need to <code>git submodule update</code>, as above. If git\nthrows an error like:</p>\n<pre>fatal: No url found <span class=\"hljs-keyword\">for</span> submodule path <span class=\"hljs-string\">&apos;resources/webidl2/test/widlproc&apos;</span> <span class=\"hljs-keyword\">in</span> .gitmodules\nFailed <span class=\"hljs-built_in\">to</span> recurse <span class=\"hljs-keyword\">into</span> submodule path <span class=\"hljs-string\">&apos;resources/webidl2&apos;</span>\nfatal: No url found <span class=\"hljs-keyword\">for</span> submodule path <span class=\"hljs-string\">&apos;tools/html5lib&apos;</span> <span class=\"hljs-keyword\">in</span> .gitmodules\nFailed <span class=\"hljs-built_in\">to</span> recurse <span class=\"hljs-keyword\">into</span> submodule path <span class=\"hljs-string\">&apos;resources&apos;</span>\nFailed <span class=\"hljs-built_in\">to</span> recurse <span class=\"hljs-keyword\">into</span> submodule path <span class=\"hljs-string\">&apos;tools&apos;</span></pre><p>then remove the <code>tools</code> and <code>resources</code> directories, as above.</p>\n<h1><span>Windows Notes</span></h1>\n<p>On Windows <code>wpt</code> commands mut bre prefixed with <code>python</code> or the path\nto the python binary (if <code>python</code> is not in your <code>%PATH%</code>).</p>\n<p>Alternatively, you may also use\n<a href=\"https://msdn.microsoft.com/en-us/commandline/wsl/about\">Bash on Ubuntu on Windows</a>\nin the Windows 10 Anniversary Update build, then access your windows\npartition from there to launch <code>wpt</code> commands.</p>\n<p>Please make sure git and your text editor do not automatically convert\nline endings, as it will cause lint errors. For git, please set\n<code>git config core.autocrlf false</code> in your working tree.</p>\n<h1>Certificates</h1>\n<p>By default pregenerated certificates for the web-platform.test domain\nare provided in the repository. If you wish to generate new\ncertificates for any reason it&apos;s possible to use OpenSSL when starting\nthe server, or starting a test run, by providing the\n<code>--ssl-type=openssl</code> argument to the <code>wpt serve</code> or <code>wpt run</code>\ncommands.</p>\n<p>If you installed OpenSSL in such a way that running <code>openssl</code> at a\ncommand line doesn&apos;t work, you also need to adjust the path to the\nOpenSSL binary. This can be done by adding a section to <code>config.json</code>\nlike:</p>\n<pre><span class=\"hljs-string\">&quot;ssl&quot;</span>: {<span class=\"hljs-string\">&quot;openssl&quot;</span>: {<span class=\"hljs-string\">&quot;binary&quot;</span>: <span class=\"hljs-string\">&quot;/path/to/openssl&quot;</span>}}</pre><p>On Windows using OpenSSL typically requires installing an OpenSSL distribution.\n<a href=\"https://slproweb.com/products/Win32OpenSSL.html\">Shining Light</a>\nprovide a convenient installer that is known to work, but requires a\nlittle extra setup, i.e.:</p>\n<p>Run the installer for Win32_OpenSSL_v1.1.0b (30MB). During installation,\nchange the default location for where to Copy OpenSSL Dlls from the\nSystem directory to the /bin directory.</p>\n<p>After installation, ensure that the path to OpenSSL (typically,\nthis will be <code>C:\\OpenSSL-Win32\\bin</code>) is in your <code>%Path%</code>\n<a href=\"http://www.computerhope.com/issues/ch000549.htm\">Environment Variable</a>.\nIf you forget to do this part, you will most likely see a &apos;File Not Found&apos;\nerror when you start wptserve.</p>\n<p>Finally, set the path value in the server configuration file to the\ndefault OpenSSL configuration file location. To do this,\ncopy <code>config.default.json</code> in the web-platform-tests root to <code>config.json</code>.\nThen edit the JSON so that the key <code>ssl/openssl/base_conf_path</code> has a\nvalue that is the path to the OpenSSL config file (typically this\nwill be <code>C:\\\\OpenSSL-Win32\\\\bin\\\\openssl.cfg</code>).</p>\n<h1>Publication</h1>\n<p>The master branch is automatically synced to <a href=\"http://w3c-test.org/\">http://w3c-test.org/</a>.</p>\n<p>Pull requests are\n<a href=\"http://w3c-test.org/submissions/\">automatically mirrored</a> except those\nthat modify sensitive resources (such as <code>.py</code>). The latter require\nsomeone with merge access to comment with &quot;LGTM&quot; or &quot;w3c-test:mirror&quot; to\nindicate the pull request has been checked.</p>\n<h1>Finding Things</h1>\n<p>Each top-level directory matches the shortname used by a standard, with\nsome exceptions. (Typically the shortname is from the standard&apos;s\ncorresponding GitHub repository.)</p>\n<p>For some of the specifications, the tree under the top-level directory\nrepresents the sections of the respective documents, using the section\nIDs for directory names, with a maximum of three levels deep.</p>\n<p>So if you&apos;re looking for tests in HTML for &quot;The History interface&quot;,\nthey will be under <code>html/browsers/history/the-history-interface/</code>.</p>\n<p>Various resources that tests depend on are in <code>common</code>, <code>images</code>, and\n<code>fonts</code>.</p>\n<h1>Branches</h1>\n<p>In the vast majority of cases the <strong>only</strong> upstream branch that you\nshould need to care about is <code>master</code>. If you see other branches in\nthe repository, you can generally safely ignore them.</p>\n<h1>Contributing</h1>\n<p>Save the Web, Write Some Tests!</p>\n<p>Absolutely everyone is welcome (and even encouraged) to contribute to\ntest development, so long as you fulfill the contribution requirements\ndetailed in the <a href=\"https://github.com/w3c/web-platform-tests/blob/master/CONTRIBUTING.md\">Contributing Guidelines</a>. No test is\ntoo small or too simple, especially if it corresponds to something for\nwhich you&apos;ve noted an interoperability bug in a browser.</p>\n<p>The way to contribute is just as usual:</p>\n<ul>\n<li>Fork this repository (and make sure you&apos;re still relatively in sync\nwith it if you forked a while ago).</li>\n<li>Create a branch for your changes:\n<code>git checkout -b topic</code>.</li>\n<li>Make your changes.</li>\n<li>Run the lint script described below.</li>\n<li>Commit locally and push that to your repo.</li>\n<li>Send in a pull request based on the above.</li>\n</ul>\n<h2>Issues with web-platform-tests</h2>\n<p>If you spot an issue with a test and are not comfortable providing a\npull request per above to fix it, please\n<a href=\"https://github.com/w3c/web-platform-tests/issues/new\">file a new issue</a>.\nThank you!</p>\n<h2>Lint tool</h2>\n<p>We have a lint tool for catching common mistakes in test files. You\ncan run it manually by starting the <code>lint</code> executable from the root of\nyour local web-platform-tests working directory like this:</p>\n<pre>./wpt lint</pre><p>The lint tool is also run automatically for every submitted pull\nrequest, and reviewers will not merge branches with tests that have\nlint errors, so you must fix any errors the lint tool reports.</p>\n<p>In the unusual case of error reports for things essential to a\ncertain test or that for other exceptional reasons shouldn&apos;t prevent\na merge of a test, update and commit the <code>lint.whitelist</code> file in the\nweb-platform-tests root directory to suppress the error reports.</p>\n<p>For more details, see the <a href=\"http://web-platform-tests.org/writing-tests/lint-tool.html\">lint-tool documentation</a>.</p>\n<h2>Adding command-line scripts (&quot;tools&quot; subdirs)</h2>\n<p>Sometimes you may want to add a script to the repository that&apos;s meant\nto be used from the command line, not from a browser (e.g., a script\nfor generating test files). If you want to ensure (e.g., for security\nreasons) that such scripts won&apos;t be handled by the HTTP server, but\nwill instead only be usable from the command line, then place them in\neither:</p>\n<ul>\n<li><p>the <code>tools</code> subdir at the root of the repository, or</p>\n</li>\n<li><p>the <code>tools</code> subdir at the root of any top-level directory in the\nrepository which contains the tests the script is meant to be used\nwith</p>\n</li>\n</ul>\n<p>Any files in those <code>tools</code> directories won&apos;t be handled by the HTTP\nserver; instead the server will return a 404 if a user navigates to\nthe URL for a file within them.</p>\n<p>If you want to add a script for use with a particular set of tests but\nthere isn&apos;t yet any <code>tools</code> subdir at the root of a top-level\ndirectory in the repository containing those tests, you can create a\n<code>tools</code> subdir at the root of that top-level directory and place your\nscripts there.</p>\n<p>For example, if you wanted to add a script for use with tests in the\n<code>notifications</code> directory, create the <code>notifications/tools</code> subdir and\nput your script there.</p>\n<h1>Test Review</h1>\n<p>We can sometimes take a little while to go through pull requests\nbecause we have to go through all the tests and ensure that they match\nthe specification correctly. But we look at all of them, and take\neverything that we can.</p>\n<p>OWNERS files are used only to indicate who should be notified of pull\nrequests.  If you are interested in receiving notifications of proposed\nchanges to tests in a given directory, feel free to add yourself to the\nOWNERS file. Anyone with expertise in the specification under test can\napprove a pull request.  In particular, if a test change has already\nbeen adequately reviewed &quot;upstream&quot; in another repository, it can be\npushed here without any further review by supplying a link to the\nupstream review.</p>\n<h1>Getting Involved</h1>\n<p>If you wish to contribute actively, you&apos;re very welcome to join the\npublic-test-infra@w3.org mailing list (low traffic) by\n<a href=\"mailto:public-test-infra-request@w3.org?subject=subscribe\">signing up to our mailing list</a>.\nThe mailing list is <a href=\"https://lists.w3.org/Archives/Public/public-test-infra/\">archived</a>.</p>\n<p>Join us on irc #testing (<a href=\"https://www.w3.org/wiki/IRC\">irc.w3.org</a>, port 6665). The channel\nis <a href=\"http://logs.glob.uno/?c=w3%23testing\">archived</a>.</p>\n<h1>Documentation</h1>\n<ul>\n<li><a href=\"http://web-platform-tests.org/\">How to write and review tests</a></li>\n<li><a href=\"http://wptserve.readthedocs.org/en/latest/\">Documentation for the wptserve server</a></li>\n</ul>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/mikiec84/web-platform-tests",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/mikiec84",
          "text": "mikiec84"
        }
      ]
    }
  ]
}